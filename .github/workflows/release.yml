name: Publish

on:
  push:
    branches: [ main ]

jobs:

  test:
    name: Unit tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # This will use OpenJDK java distribution. Look into the `actions/setup-java@v3` github page for more info and options
          java-version: 11
          cache: 'gradle' #This assumes you use gradle. If you use differnet build system, check out the `actions/setup-java@v3` GitHub page

      - name: Grand execute permissions to gradlew
        run: chmod +x gradlew

      - name: Run unit tests
        run: ./gradlew testDebug #If you have flavors, this command will probably change something like `test<Flavor>DebugUnitTest

  apk:
    name: Generate APK
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 11
          cache: 'gradle'

      - name: Assemble app debug APK
        run: ./gradlew assembleDebug #If you have flavors this command will be different. Run `./gradlew tasks` localy to see that's available and what you need.

      - name: Upload app APK
        uses: actions/upload-artifact@v3
        with:
          name: app-debug
          path: app/build/outputs/apk/debug/app-debug.apk #This path might be differnt on your side especially if you have flavors. Look in your side what is the correct dir.

      - name: Assemble app instrumentation tests
        run: ./gradlew assembleDebugAndroidTest #This command might differ on your side, especially if you have flavors. Test it out locally, or run `./gradlew tasks` to see what you need.

      - name: Upload app test APK
        uses: actions/upload-artifact@v3
        with:
          name: app-debug-androidTest
          path: app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk #Double check if this is the correct output dir on your side.

  firebase:
    name: Run UI tests with Firebase Test Lab
    needs: apk
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Download app APK
        uses: actions/download-artifact@v1
        with:
          name: app-debug

      - name: Download app test APK
        uses: actions/download-artifact@v1
        with:
          name: app-debug-androidTest

      - id: Auth
        uses: google-github-actions/auth@v0
        with:
          project_id: ${{ secrets.FRIENDS_PROJECT_ID }}
          credentials_json: ${{ secrets.FRIENDS_FIREBASE_TEST_LAB_AUTH }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Use gcloud CLI
        run: gcloud info

      - name: Run instrumentation tests in Firebase Test Lab
        run: gcloud firebase test android run --type instrumentation --app app-debug/app-debug.apk --test app-debug-androidTest/app-debug-androidTest.apk --device model=blueline,version=28
        # For the command above: the targeting device `model=blueline,version=28` might not be available at the time you are writing this script. It is a matter to change on the firebase side, so you have to look what is available there.
        # Also, make sure the apk files and directories are correct, they might be differnt on your side depending on the project setup (names, modules, flavors).

  distribute:
    name: Distribute app bundle to Play Store
    needs: firebase
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 11
          cache: 'gradle'

      - name: Version bump
        uses: chkfung/android-version-actions@v1.1
        with:
          gradlePath: app/build.gradle
          versionCode: ${{ github.run_number }}

      - name: Assemble Release Bundle
        run: ./gradlew bundleRelease

      - name: Sign Release
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/bundle/release
          signingKeyBase64: ${{ secrets.ANDROID_KEYSTORE }}
          alias: ${{ secrets.FRIENDS_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.FRIENDS_KEY_PASSWORD }}

      - name: Setup authorization with Google Play Store
        run: echo '${{ secrets.GOOGLE_SERVICES_API }}' > service_account.json

      - name: Deploy to alpha
        uses: r0adkll/upload-google-play@v1.0.19
        with:
          serviceAccountJson: service_account.json
          packageName: nl.jovmit.friends #this should match the package of your app.
          releaseFiles: app/build/outputs/bundle/release/app-release.aab # Double check if this is the correct directory on your side.
          track: alpha
          status: 'completed'
          whatsNewDirectory: whatsNewDirectory/
